//MY SOLUTION
class Solution{
    public static int lengthOfLongestSubstring(String s){
        int current = 0;
        int prev = 0;
        int maxLen = 0;
        Set<Character> set = new HashSet<>();
        while(current < s.length()){
            if(!set.contains(s.charAt(current))){
                set.add(s.charAt(current++));
                maxLen = Math.max(maxLen, set.size());
            }else{
                set.remove(s.charAt(prev++));
            }
        }
        return maxLen;
    }
}
//ALSO MY SOLUTION
// class Solution{
//     public static int lengthOfLongestSubstring(String s) {
//         int start = 0;
//         int end = 0;
//         if (s.length() == 0)
//             return 0; //handling the edge case with an empty string.
//         StringBuilder ans = new StringBuilder(Character.toString(s.charAt(start))); //initialising the stringbuilder with the
//         //first character of the given string.
//         int max_length = 1;
//         while (end < s.length() - 1) {
//             if (ans.indexOf(Character.toString(s.charAt(end + 1))) == -1){
//                 ans.append(s.charAt(end+1));
//                 max_length=Math.max(ans.length(),max_length);
//                 end++;
//             }
//             else{
//                 ans.setLength(0);
//                 start++;
//                 ans.append(Character.toString(s.charAt(start)));
//                 end=start;
//             }
//         }
//         return max_length;
//         }
//     }
